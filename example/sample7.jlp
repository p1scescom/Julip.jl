(defn rj Int (dv (Vector Int) di Int count Int)
  (if (= count 0)
    di
    (let (b (get dv (- di 1)))
      (if (= b 91)
        (rj dv (+ di 1) (- count 1))
      (if (= b 93)
        (rj dv (+ di 1) (+ count 1))
        (rj dv (+ di 1) count)
        )))))

(defn lj Int (dv (Vector Int) di Int count Int)
  (if (= count 0)
    di
    (let (b (get dv (- di 1)))
      (if (= b 91)
        (lj dv (- di 1) (- count 1))
      (if (= b 93)
        (lj dv (- di 1) (+ count 1))
        (lj dv (- di 1) count))))))

(defn bf Int (dv (Vector Int) mv (Vector Int) di Int mi Int)
  (let (c (get dv di))
    (if (= c 62)
      (bf dv mv (+ di 1) (+ mi 1))
    (if (= c 60)
      (bf dv mv (+ di 1) (- mi 1))
    (if (= c 43)
      (let ()
        (set mv mi (+ (get mv mi) 1))
        (bf dv mv (+ di 1) mi))
    (if (= c 45)
      (let ()
        (set mv mi (- (get mv mi) 1))
        (bf dv mv (+ di 1) mi))
    (if (= c 91)
      (if (= 0 (get mv mi))
        (bf dv mv (rj dv (+ di 1) 1) mi)
        (bf dv mv (+ di 1) mi))
    (if (= c 93)
      (if (= 0 (get mv mi))
        (bf dv mv (+ di 1) mi)
        (bf dv mv (lj dv (- di 1) 1) mi))
    (if (= c 46)
      (let ()
        (putchar (get mv mi))
        (bf dv mv (+ di 1) mi))
    0)))))))))

(defn reads Int (dv (Vector Int) mv (Vector Int) di Int)
  (let (c (getchar))
    (set dv di c)
    (if (= c -1)
      (bf dv mv 0 0)
      (reads dv mv (+ di 1)))))

(defn main Int ()
  (let (dv ((Vector Int) 1024)
        mv ((Vector Int) 1024))
    (reads dv mv 0)))
